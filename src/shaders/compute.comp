#version 450
#extension GL_ARB_separate_shader_objects : enable

#define WORKGROUP_SIZE 32
layout(local_size_x = WORKGROUP_SIZE, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0) uniform CameraBufferObject {
    mat4 view;
    mat4 proj;
} camera;

layout(set = 1, binding = 0) uniform Time {
    float deltaTime;
    float totalTime;
};

struct Blade {
    vec4 v0;
    vec4 v1;
    vec4 v2;
    vec4 up;
};

// TODO: Add bindings to:
// 1. Store the input blades
// 2. Write out the culled blades
// 3. Write the total number of blades remaining

layout(set = 2, binding = 0) uniform ModelBufferObject {
    mat4 model;
};

layout(set = 3, binding = 0) buffer Blades {
    Blade blades[];
};

layout(set = 3, binding = 1) buffer Culled {
    Blade culled[];
};

// The project is using vkCmdDrawIndirect to use a buffer as the arguments for a draw call
// This is sort of an advanced feature so we've showed you what this buffer should look like
//
layout(set = 3, binding = 2) buffer NumBlades {
    uint vertexCount;   // Write the number of blades remaining here
    uint instanceCount; // = 1
    uint firstVertex;   // = 0
    uint firstInstance; // = 0
} numBlades;

bool inBounds(float value, float bounds) {
    return (value >= -bounds) && (value <= bounds);
}

void main() {
    // Reset the number of blades to 0
    if (gl_GlobalInvocationID.x == 0) {
        numBlades.vertexCount = 0;
    }
    barrier(); // Wait till all threads reach this point

    // TODO: Apply forces on every blade and update the vertices in the buffer
    // Done

    // get data
    vec3 v0 = blades[gl_GlobalInvocationID.x].v0.xyz;
    float orientation = blades[gl_GlobalInvocationID.x].v0.w;
    vec3 v1 = blades[gl_GlobalInvocationID.x].v1.xyz;
    float height = blades[gl_GlobalInvocationID.x].v1.w; // ~ 1
    vec3 v2 = blades[gl_GlobalInvocationID.x].v2.xyz;
    float weidth = blades[gl_GlobalInvocationID.x].v2.w; // ~ 0.01
    vec3 up = blades[gl_GlobalInvocationID.x].up.xyz;
    float stiffness = blades[gl_GlobalInvocationID.x].up.w; // in this demo, it's 7~13

    // the norm vector that perpendicular to blade surface
    vec3 norm = vec3(cos(orientation), 0.0, sin(orientation));
    norm.y = -(up.x * norm.x + up.z * norm.z) / up.y;
    norm = normalize(norm);

    // internal bending
    const float internal_force_factor = 1;
    vec3 internal_force = internal_force_factor * norm;

    // gravity force
    const float mass = 1.0;
    const float gravity_const = 10.0;  // the gravity constant
    vec3 gravity_dir = (transpose(model) * vec4(0.0, -1.0, 0.0, 1.0)).xyz;  // direction of gravity force in model local frame
    float v02_proj = dot(v2 - v0, norm);
    vec3 gravity_force = gravity_const * mass * gravity_dir;

    // stretch force
    const float stretch_factor = 2.5;
    vec3 stretch_force = stretch_factor * sign(v02_proj) * norm;

    // wind force
    const float direction_change_rate = 0.3;
    const float intensity_change_rate = 0.3;
    const float wind_wavelength = 5.0;
    const float wind_intensity = 7.0;
    // vec3 wind_dir_global = normalize(vec3(1.0, 0.0, cos(direction_change_rate * totalTime) / 4.0));
    vec3 wind_dir_global = vec3(1.0, 0.0, 0.0);
    vec3 wind_dir_model = (transpose(model) * vec4(wind_dir_global, 1.0)).xyz;
    vec3 pos_global = (transpose(model) * vec4(v0, 1.0)).xyz;
    float wind_strength_phase = cos(dot(wind_dir_global, pos_global) / wind_wavelength - intensity_change_rate * totalTime);
    float wind_strength = wind_intensity * (0.5 + 0.5 * wind_strength_phase);
    float wind_surface_factor = 1.0 - 0.7 * dot(wind_dir_model, normalize(v2 - v0));
    float wind_height_factor = dot(v2 - v0, up) / height;
    vec3 wind_force = wind_strength * wind_surface_factor * wind_height_factor * wind_dir_model;

    // recover force
    vec3 vec_displacement = v0 + height * up - v2;
    vec3 recover_force = stiffness * vec_displacement;

    // apply force
    vec3 force_displacement = (internal_force + gravity_force + stretch_force + recover_force + wind_force) * deltaTime;
    vec3 v2_new = v2 + force_displacement;

    // avoid fail into ground
    v2_new = v2_new - up * min(dot(up, v2_new - v0), 0.0);

    // move the v1 control point
    float len_proj = length((v2_new - v0) - dot(up, v2_new - v0) * up);
    float ratio = len_proj / height;
    vec3 v1_new = v0 + height * max(1.0 - ratio, 0.05 * max(ratio, 1.0)) * up;

    // length correction
    float len_curve = (2.0 * length(v2_new - v0) + (length(v2_new - v1_new) + length(v1_new - v0))) / 3.0;
    ratio = height / len_curve;
    vec3 v1_cor = v0 + ratio * (v1_new - v0);
    vec3 v2_cor = v1_cor + ratio * (v2_new - v1_new);

    blades[gl_GlobalInvocationID.x].v1 = vec4(v1_cor, height);
    blades[gl_GlobalInvocationID.x].v2 = vec4(v2_cor, weidth);

	// TODO: Cull blades that are too far away or not in the camera frustum and write them
	// to the culled blades buffer
	// Note: to do this, you will need to use an atomic operation to read and update numBlades.vertexCount
	// You want to write the visible blades to the buffer without write conflicts between threads

    // save data
    if (true) {
        uint idx = atomicAdd(numBlades.vertexCount , 1);
        culled[idx] = blades[gl_GlobalInvocationID.x];
    }
}